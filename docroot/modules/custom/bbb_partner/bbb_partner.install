<?php

/**
 * @file
 * Install, update and uninstall module functions.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\Entity\EntityViewMode;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\taxonomy\Entity\Term;

/**
 * Update help text for partner node title.
 */
function bbb_partner_update_8001() {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('bbb_partner', 'bbb_partner_update_8001');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Implements hook_uninstall().
 */
function bbb_partner_uninstall() {

  // Delete all nodes of partner content type.
  $storage_handler = \Drupal::entityTypeManager()
    ->getStorage('node');
  $nodes = $storage_handler->loadByProperties(['type' => 'partner']);
  $storage_handler->delete($nodes);

  // Delete partner content type.
  $content_type = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('partner');
  if ($content_type) {
    $content_type->delete();
  }

  // Deleting configurations on module uninstall.
  $configs = [
    'core.entity_form_display.taxonomy_term.partner.default',
    'core.entity_view_display.taxonomy_term.partner.default',
    'field.field.taxonomy_term.partner.field_address',
    'field.field.taxonomy_term.partner.field_amount_of_finance_needed',
    'field.field.taxonomy_term.partner.field_case_study_url',
    'field.field.taxonomy_term.partner.field_content_areas',
    'field.field.taxonomy_term.partner.field_email',
    'field.field.taxonomy_term.partner.field_exclude_from_support_finde',
    'field.field.taxonomy_term.partner.field_exclude_region',
    'field.field.taxonomy_term.partner.field_expertise',
    'field.field.taxonomy_term.partner.field_finance_type',
    'field.field.taxonomy_term.partner.field_include_quote_section',
    'field.field.taxonomy_term.partner.field_logo',
    'field.field.taxonomy_term.partner.field_phone',
    'field.field.taxonomy_term.partner.field_type_of_funding',
    'field.field.taxonomy_term.partner.field_programme',
    'field.field.taxonomy_term.partner.field_quote_credit',
    'field.field.taxonomy_term.partner.field_quote_pic',
    'field.field.taxonomy_term.partner.field_quote_text',
    'field.field.taxonomy_term.partner.field_region',
    'field.field.taxonomy_term.partner.field_region',
    'field.field.taxonomy_term.partner.field_show_at_portfolio_module',
    'field.field.taxonomy_term.partner.field_website_link_bbls',
    'field.field.taxonomy_term.partner.field_website_link_cbils',
    'field.field.taxonomy_term.partner.field_website_link_clbils',
    'field.field.taxonomy_term.partner.field_website_link_rls',
    'field.field.taxonomy_term.partner.field_website_link',
    'field.storage.taxonomy_term.field_address',
    'field.storage.taxonomy_term.field_amount_of_finance_needed',
    'field.storage.taxonomy_term.field_case_study_url',
    'field.storage.taxonomy_term.field_content_areas',
    'field.storage.taxonomy_term.field_email',
    'field.storage.taxonomy_term.field_exclude_from_support_finde',
    'field.storage.taxonomy_term.field_exclude_region',
    'field.storage.taxonomy_term.field_expertise',
    'field.storage.taxonomy_term.field_finance_type',
    'field.storage.taxonomy_term.field_include_quote_section',
    'field.storage.taxonomy_term.field_logo',
    'field.storage.taxonomy_term.field_phone',
    'field.storage.taxonomy_term.field_programme',
    'field.storage.taxonomy_term.field_quote_credit',
    'field.storage.taxonomy_term.field_quote_pic',
    'field.storage.taxonomy_term.field_quote_text',
    'field.storage.taxonomy_term.field_region',
    'field.storage.taxonomy_term.field_show_at_portfolio_module',
    'field.storage.taxonomy_term.field_supporting_business',
    'field.field.taxonomy_term.partner.field_supporting_business',
    'field.storage.taxonomy_term.field_website_link_bbls',
    'field.storage.taxonomy_term.field_website_link_cbils',
    'field.storage.taxonomy_term.field_website_link_clbils',
    'field.storage.taxonomy_term.field_website_link_rls',
    'field.storage.taxonomy_term.field_type_of_funding',
    'field.storage.taxonomy_term.field_website_link',
    'taxonomy.vocabulary.content_areas',
    'taxonomy.vocabulary.financial_variant',
    'field.field.taxonomy_term.partner.field_geofield',
    'field.storage.taxonomy_term.field_geofield',
    'core.entity_view_mode.taxonomy_term.notes_to_editor',
    'core.entity_view_display.taxonomy_term.partner.notes_to_editor',
    'block.block.views_block__partners_partner_list',
    'core.entity_view_display.taxonomy_term.partner.partner_list',
    'core.entity_view_mode.taxonomy_term.partner_list',
    'views.view.partners',
  ];

  foreach ($configs as $config) {
    \Drupal::configFactory()->getEditable($config)->delete();
  }
}

/**
 * Update taxonomy partner fields.
 */
function bbb_partner_update_8002() {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('bbb_partner', 'bbb_partner_update_8002');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Add notes to editor view mode for partner taxonomy.
 */
function bbb_partner_update_8003() {
  $view_mode = 'taxonomy_term.notes_to_editor';
  // Create the view mode notes_to_editor if not exists.
  if (!EntityViewMode::load($view_mode)) {
    _bbb_article_rewrite_configuration('core.entity_view_mode.taxonomy_term.notes_to_editor', 'bbb_partner', 'install');
  }
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.notes_to_editor', 'bbb_partner', 'install');
}

/**
 * Add link field attribute in partner form display.
 */
function bbb_partner_update_8004() {
  _bbb_article_rewrite_configuration('core.entity_form_display.taxonomy_term.partner.default', 'bbb_partner', 'install');
}

/**
 * Create sector, investment range fields for partner.
 */
function bbb_partner_update_8005() {
  // Create fields for partner taxonomy.
  _bbb_article_create_field_storage('field.storage.taxonomy_term.field_investment_range', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('field.field.taxonomy_term.partner.field_investment_range', 'bbb_partner', 'install');

  // Update the partner terms with value Finance Hub Partners.
  // Load terms with value Finance Hub Partners.
  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties([
      'vid' => 'partner',
      'field_partner_types' => 'Finance Hub Partners',
    ]);

  if (!empty($terms)) {
    foreach ($terms as $term) {
      $partner_types = $term->get('field_partner_types')->getValue();
      foreach ($partner_types as $key => $item) {
        if ($item["value"] == 'Finance Hub Partners') {
          // Remove Finance Hub Partners value.
          unset($partner_types[$key]);
        }
      }
      $term->field_partner_types->setValue($partner_types);
      $term->save();
    }
  }
  // Update partner type field options.
  _bbb_article_rewrite_configuration('field.storage.taxonomy_term.field_partner_types', 'bbb_partner', 'install');
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');
  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('bbb_partner', 'bbb_partner_update_8005');
  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Create show on website field for partner taxonomy.
 */
function bbb_partner_update_8006() {
  // Import show on website configs for partner taxonomy.
  _bbb_article_create_field_storage('field.storage.taxonomy_term.field_show_on_website', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('field.field.taxonomy_term.partner.field_show_on_website', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_form_display.taxonomy_term.partner.default', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.default', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.notes_to_editor', 'bbb_partner', 'install');
}

/**
 * Update show on website field for partner taxonomy.
 */
function bbb_partner_update_8007() {
  // Update show on website configs for partner taxonomy.
  _bbb_article_rewrite_configuration('field.field.taxonomy_term.partner.field_show_on_website', 'bbb_partner', 'install');
}

/**
 * Add partner list view mode, block and view.
 */
function bbb_partner_update_8008() {
  $view_mode = 'taxonomy_term.partner_list';
  // Create the view mode partner_list if not exists.
  if (!EntityViewMode::load($view_mode)) {
    _bbb_article_rewrite_configuration('core.entity_view_mode.taxonomy_term.partner_list', 'bbb_partner', 'install');
  }

  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.partner_list', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('views.view.partners', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('block.block.views_block__partners_partner_list', 'bbb_partner', 'install');

  // Place the view block in site studio hidden region.
  $block = Block::load('views_block__partners_partner_list');
  $block->setRegion('dx8_hidden');
  $block->save();
}

/**
 * Create new sector field and update form and view displays.
 */
function bbb_partner_update_8009() {
  $module_path = \Drupal::service('extension.list.module')->getPath('bbb_partner');
  $config_install_path = $module_path . '/config/install';
  $config_manager = Drupal::service('config.manager');
  $source = new FileStorage($config_install_path);

  $page_module_path = \Drupal::service('extension.list.module')->getPath('bbb_partner');
  $storage_config_path = $page_module_path . '/config/install';
  $storage_source = new FileStorage($storage_config_path);

  $entity_type_manager = Drupal::entityTypeManager();
  $field_storage = $entity_type_manager->getStorage('field_storage_config');
  $field_config = $entity_type_manager->getStorage('field_config');

  // Only try to create the field if it doesn't already exist.
  if (!$field_storage->load('field.storage.taxonomy_term.field_partner_sector')) {
    $config_record = $storage_source->read('field.storage.taxonomy_term.field_partner_sector');
    $entity_type = $config_manager->getEntityTypeIdByName('field.storage.taxonomy_term.field_partner_sector');

    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
    $storage = $entity_type_manager->getStorage($entity_type);

    // Create the config entity.
    $storage->createFromStorageRecord($config_record)->save();
  }

  if (!$field_config->load('taxonomy_term.partner.field_partner_sector')) {
    $config_record = $source->read('field.field.taxonomy_term.partner.field_partner_sector');
    $entity_type = $config_manager->getEntityTypeIdByName('field.field.taxonomy_term.partner.field_partner_sector');

    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
    $storage = $entity_type_manager->getStorage($entity_type);

    // Create the config entity.
    $storage->createFromStorageRecord($config_record)->save();
  }

  $config_optional_path = $module_path . '/config/install';

  // Config Storage Service.
  $config_storage = \Drupal::service('config.storage');

  // Manually import config from install folder.
  $source = new FileStorage($config_optional_path);
  // Upate Entity form display.
  $config_storage->write('core.entity_form_display.taxonomy_term.partner.default', $source->read('core.entity_form_display.taxonomy_term.partner.default'));

  _bbb_article_rewrite_configuration('views.view.partners', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.default', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.partner_list', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.notes_to_editor', 'bbb_partner', 'install');
}

/**
 * Update view config for empty results.
 */
function bbb_partner_update_8010() {
  _bbb_article_rewrite_configuration('views.view.partners', 'bbb_partner', 'install');
}

/**
 * Update view config for filter order.
 */
function bbb_partner_update_8011() {
  _bbb_article_rewrite_configuration('views.view.partners', 'bbb_partner', 'install');
}

/**
 * Update Investment Type, Manager and Stages field config.
 */
function bbb_partner_update_8012() {
  _bbb_article_rewrite_configuration('field.field.taxonomy_term.partner.field_investment_manager', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('field.field.taxonomy_term.partner.field_investment_types', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('field.field.taxonomy_term.partner.field_stages', 'bbb_partner', 'install');
}

/**
 * Update view config for filter order and tid filter.
 */
function bbb_partner_update_8013() {
  _bbb_article_rewrite_configuration('views.view.partners', 'bbb_partner', 'install');
}

/**
 * Add bbls financial variant field and update type of funding fields.
 */
function bbb_partner_update_8014() {
  // Delete type of funding boolean field.
  $config = \Drupal::configFactory()->getEditable('field.field.taxonomy_term.partner.field_type_of_funding');
  if ($config) {
    \Drupal::configFactory()->getEditable('field.field.taxonomy_term.partner.field_type_of_funding')->delete();
    \Drupal::configFactory()->getEditable('field.storage.taxonomy_term.field_type_of_funding')->delete();
  }

  // Create funding type taxonomy.
  _bbb_article_rewrite_configuration('taxonomy.vocabulary.funding_type', 'bbb_partner', 'install');

  // Create BBLS financial variant and type of funding taxonomy reference field.
  _bbb_article_create_field_storage('field.storage.taxonomy_term.field_bbls_financial_variant', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('field.field.taxonomy_term.partner.field_bbls_financial_variant', 'bbb_partner', 'install');

  _bbb_article_create_field_storage('field.storage.taxonomy_term.field_type_funding', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('field.field.taxonomy_term.partner.field_type_funding', 'bbb_partner', 'install');

  // Update view and form modes.
  _bbb_article_rewrite_configuration('core.entity_form_display.taxonomy_term.partner.default', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.default', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.notes_to_editor', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.partner_list', 'bbb_partner', 'install');
}

/**
 * Change Amount of finance need field to entity reference field.
 */
function bbb_partner_update_8015() {
  // Delete Amount of finance need List field.
  $fields = [
    'field_amount_of_finance_needed',
  ];
  // Deleting list text field from partner taxonomy.
  foreach ($fields as $field) {
    if ($field_instance = FieldConfig::loadByName('taxonomy_term', 'partner', $field)) {
      $field_instance->delete();
    }
    if ($field_storage = FieldStorageConfig::loadByName('taxonomy_term', $field)) {
      $field_storage->delete();
    }
  }

  // Create finance_need taxonomy.
  _bbb_article_rewrite_configuration('taxonomy.vocabulary.finance_need', 'bbb_partner', 'install');

  // Import updated configs.
  $configs = [
    'core.entity_form_display.taxonomy_term.partner.default',
    'core.entity_view_display.taxonomy_term.partner.default',
    'core.entity_view_display.taxonomy_term.partner.notes_to_editor',
    'core.entity_view_display.taxonomy_term.partner.partner_list',
    'field.field.taxonomy_term.partner.field_amount_of_finance_needed',
  ];
  foreach ($configs as $config) {
    _bbb_article_rewrite_configuration($config, 'bbb_partner', 'install');
  }

  $configs = [
    'field.storage.taxonomy_term.field_amount_of_finance_needed',
  ];
  foreach ($configs as $config) {
    _bbb_article_create_field_storage($config, 'bbb_partner', 'install');
  }
}

/**
 * Create business taxonomy if not available.
 */
function bbb_partner_update_8016() {
  $term_names = [
    'BBB',
    'BBI',
    'BPC',
    'SUL',
  ];
  foreach ($term_names as $term_name) {
    $term = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(['name' => $term_name, 'vid' => 'business_structure']);
    if (empty($term)) {
      $term = Term::create([
        'name' => $term_name,
        'vid' => 'business_structure',
      ]);
      $term->save();
    }
  }
}

/**
 * Added geofield field description.
 */
function bbb_partner_update_8017() {
  _bbb_article_rewrite_configuration('field.field.taxonomy_term.partner.field_geofield', 'bbb_partner', 'install');
}

/**
 * Add new entity reference fields.
 */
function bbb_partner_update_8018() {
  // Vocabulary creation config.
  $vocabulary_configs = [
    'taxonomy.vocabulary.business_stages',
    'taxonomy.vocabulary.investment_manager',
    'taxonomy.vocabulary.investment_types',
    'taxonomy.vocabulary.lender_schemes',
    'taxonomy.vocabulary.partner_types',
    'taxonomy.vocabulary.segment',
    'taxonomy.vocabulary.stages',
  ];

  foreach ($vocabulary_configs as $value) {
    _bbb_article_rewrite_configuration($value, 'bbb_partner', 'install');
  }

  // Create field storage and field.
  $field_storage_configs = [
    'field.storage.taxonomy_term.field_bus_stages',
    'field.storage.taxonomy_term.field_inv_manager',
    'field.storage.taxonomy_term.field_lend_schemes',
    'field.storage.taxonomy_term.field_ptnr_types',
    'field.storage.taxonomy_term.field_segment_ent',
  ];
  $field_configs = [
    'field.field.taxonomy_term.partner.field_bus_stages',
    'field.field.taxonomy_term.partner.field_inv_manager',
    'field.field.taxonomy_term.partner.field_lend_schemes',
    'field.field.taxonomy_term.partner.field_ptnr_types',
    'field.field.taxonomy_term.partner.field_segment_ent',
  ];
  foreach ($field_storage_configs as $value) {
    _bbb_article_create_field_storage($value, 'bbb_partner', 'install');
  }
  foreach ($field_configs as $value) {
    _bbb_article_rewrite_configuration($value, 'bbb_partner', 'install');
  }

  // Investment type and stage filter created as
  // these were not listed in the views field list.
  $exposed_filter_fields = [
    'field_inv_types',
    'field_partner_stages',
  ];
  foreach ($exposed_filter_fields as $value) {
    // Creating fields for views filter again
    // as it not appearing in the field list.
    $module_path = \Drupal::service('extension.list.module')->getPath('bbb_partner');
    $config_install_path = $module_path . '/config/install';
    $config_manager = Drupal::service('config.manager');
    $source = new FileStorage($config_install_path);

    $page_module_path = \Drupal::service('extension.list.module')->getPath('bbb_partner');
    $storage_config_path = $page_module_path . '/config/install';
    $storage_source = new FileStorage($storage_config_path);

    $entity_type_manager = Drupal::entityTypeManager();
    $field_storage = $entity_type_manager->getStorage('field_storage_config');
    $field_config = $entity_type_manager->getStorage('field_config');

    // Only try to create the field if it doesn't already exist.
    if (!$field_storage->load('field.storage.taxonomy_term.' . $value)) {
      $config_record = $storage_source->read('field.storage.taxonomy_term.' . $value);
      $entity_type = $config_manager->getEntityTypeIdByName('field.storage.taxonomy_term.' . $value);

      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
      $storage = $entity_type_manager->getStorage($entity_type);

      // Create the config entity.
      $storage->createFromStorageRecord($config_record)->save();
    }

    if (!$field_config->load('taxonomy_term.partner.' . $value)) {
      $config_record = $source->read('field.field.taxonomy_term.partner.' . $value);
      $entity_type = $config_manager->getEntityTypeIdByName('field.field.taxonomy_term.partner.' . $value);

      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
      $storage = $entity_type_manager->getStorage($entity_type);

      // Create the config entity.
      $storage->createFromStorageRecord($config_record)->save();
    }
  }

  // Update view and form modes and partner list view.
  _bbb_article_rewrite_configuration('core.entity_form_display.taxonomy_term.partner.default', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.default', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.notes_to_editor', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.partner_list', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('views.view.partners', 'bbb_partner', 'install');
}

/**
 * Update view config for removing the class name.
 */
function bbb_partner_update_8019() {
  _bbb_article_rewrite_configuration('views.view.partners', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('core.entity_view_display.taxonomy_term.partner.partner_list', 'bbb_partner', 'install');
}

/**
 * Update view config for changing exposed filter field type.
 */
function bbb_partner_update_8020() {
  _bbb_article_rewrite_configuration('views.view.partners', 'bbb_partner', 'install');
}

/**
 * Update view config for enabling ajax.
 */
function bbb_partner_update_8021() {
  _bbb_article_rewrite_configuration('views.view.partners', 'bbb_partner', 'install');
}

/**
 * Partner list view update.
 */
function bbb_partner_update_8022() {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');
  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('bbb_partner', 'bbb_partner_update_8022');
  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Add business entity reference field to programme term.
 */
function bbb_partner_update_8023() {
  // Add field show on site field to programme term.
  _bbb_article_create_entity_field('taxonomy_term.programme.field_show_on_website', 'field.field.taxonomy_term.programme.field_show_on_website', 'bbb_partner', 'install');
}

/**
 * Disable selective better exposed option for financial variant filter.
 */
function bbb_partner_update_8024() {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');
  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('bbb_partner', 'bbb_partner_update_8022');
  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Update rabbit hole settings for taxonomies.
 */
function bbb_partner_update_8025() {

  $configs = [
    'rabbit_hole.behavior_settings.taxonomy_vocabulary_business_stages',
    'rabbit_hole.behavior_settings.taxonomy_vocabulary_content_areas',
    'rabbit_hole.behavior_settings.taxonomy_vocabulary_finance_need',
    'rabbit_hole.behavior_settings.taxonomy_vocabulary_financial_variant',
    'rabbit_hole.behavior_settings.taxonomy_vocabulary_funding_type',
    'rabbit_hole.behavior_settings.taxonomy_vocabulary_investment_manager',
    'rabbit_hole.behavior_settings.taxonomy_vocabulary_investment_types',
    'rabbit_hole.behavior_settings.taxonomy_vocabulary_lender_schemes',
    'rabbit_hole.behavior_settings.taxonomy_vocabulary_partner_types',
    'rabbit_hole.behavior_settings.taxonomy_vocabulary_segment',
    'rabbit_hole.behavior_settings.taxonomy_vocabulary_stages',
  ];

  foreach ($configs as $config) {
    _bbb_article_rewrite_configuration($config, 'bbb_partner', 'install');
  }
}

/**
 * Update fields in partner taxonomy.
 */
function bbb_partner_update_8027() {
  $fields = [
    'field_hide_on_map_listing',
    'field_hide_on_map',
  ];
  // Deleting list text field from partner taxonomy.
  foreach ($fields as $field) {
    if ($field_storage = FieldStorageConfig::loadByName('taxonomy_term', $field)) {
      $field_storage->delete();
    }
    if ($field_instance = FieldConfig::loadByName('taxonomy_term', 'partner', $field)) {
      $field_instance->delete();
    }
  }
  // Creating `Show on regional support` field.
  _bbb_article_create_field_storage('field.storage.taxonomy_term.field_show_on_regional_support', 'bbb_partner', 'install');
  _bbb_article_rewrite_configuration('field.field.taxonomy_term.partner.field_show_on_regional_support', 'bbb_partner', 'install');

  // Updating form and view display.
  // Changing label for show on website field.
  $configs = [
    'field.field.taxonomy_term.partner.field_show_on_website',
    'core.entity_form_display.taxonomy_term.partner.default',
    'core.entity_view_display.taxonomy_term.partner.default',
    'core.entity_view_display.taxonomy_term.partner.notes_to_editor',
    'core.entity_view_display.taxonomy_term.partner.partner_list',
  ];
  foreach ($configs as $config) {
    _bbb_article_rewrite_configuration($config, 'bbb_partner', 'install');
  }
}

/**
 * Remove old list fields.
 */
function bbb_partner_update_8028() {
  // Delete Amount of finance need List field.
  $fields = [
    'field_business_stages',
    'field_investment_manager',
    'field_investment_types',
    'field_lender_schemes',
    'field_partner_types',
    'field_segment',
    'field_stages',
  ];
  // Deleting list text field from partner taxonomy.
  foreach ($fields as $field) {
    if ($field_storage = FieldStorageConfig::loadByName('taxonomy_term', $field)) {
      $field_storage->delete();
    }
    if ($field_instance = FieldConfig::loadByName('taxonomy_term', 'partner', $field)) {
      $field_instance->delete();
    }
  }
  // Removing fields from form and display.
  $configs = [
    'core.entity_form_display.taxonomy_term.partner.default',
    'core.entity_view_display.taxonomy_term.partner.default',
    'core.entity_view_display.taxonomy_term.partner.notes_to_editor',
    'core.entity_view_display.taxonomy_term.partner.partner_list',
  ];
  foreach ($configs as $config) {
    _bbb_article_rewrite_configuration($config, 'bbb_partner', 'install');
  }
}

/**
 * Disable rabbit hole settings to override.
 */
function bbb_partner_update_8029() {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');
  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('bbb_partner', 'bbb_partner_update_8026');
  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Show count option in header.
 */
function bbb_partner_update_8030() {
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');
  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('bbb_partner', 'bbb_partner_update_8030');
  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}

/**
 * Add finance varient reference field to programme term.
 */
function bbb_partner_update_8031() {
  // Add field financial varient field to programme term.
  _bbb_article_create_field_storage('field.storage.taxonomy_term.field_financial_variants', 'bbb_partner', 'install');
  _bbb_article_create_entity_field('taxonomy_term.programme.field_financial_variants', 'field.field.taxonomy_term.programme.field_financial_variants', 'bbb_partner', 'install');
  $configs = [
    'core.entity_form_display.taxonomy_term.programme.default',
    'core.entity_view_display.taxonomy_term.programme.default',
  ];
  foreach ($configs as $config) {
    _bbb_article_rewrite_configuration($config, 'bbb_partner', 'install');
  }
}

/**
 * Remove finance variant fields in partner taxonomy.
 */
function bbb_partner_update_8032() {
  // Delete Amount of finance need List field.
  $fields = [
    'field_bbls_financial_variant',
    'field_cbils_financial_variant',
    'field_clbils_financial_variant',
    'field_efg_financial_variant',
    'field_rls_financial_variant',
  ];
  // Deleting list text field from partner taxonomy.
  foreach ($fields as $field) {
    if ($field_storage = FieldStorageConfig::loadByName('taxonomy_term', $field)) {
      $field_storage->delete();
    }
    if ($field_instance = FieldConfig::loadByName('taxonomy_term', 'partner', $field)) {
      $field_instance->delete();
    }
  }
  // Removing fields from form and display.
  $configs = [
    'core.entity_form_display.taxonomy_term.partner.default',
    'core.entity_view_display.taxonomy_term.partner.default',
    'core.entity_view_display.taxonomy_term.partner.notes_to_editor',
    'core.entity_view_display.taxonomy_term.partner.partner_list',
    'views.view.partners',
  ];
  foreach ($configs as $config) {
    _bbb_article_rewrite_configuration($config, 'bbb_partner', 'install');
  }
}
