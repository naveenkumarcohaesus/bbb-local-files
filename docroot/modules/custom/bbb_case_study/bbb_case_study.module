<?php

/**
 * @file
 * Contains implementations for common, shared functionality.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function bbb_case_study_theme($existing, $type, $theme, $path) {
  return [
    'related_tags_accessibility' => [
      'variables' => [
        'links' => NULL,
        'multiple' => NULL,
        'attributes' => NULL,
      ],
    ],
    'filtered_tags_container' => [
      'variables' => NULL,
      'render element' => 'html',
    ],
  ];
}

/**
 * Implements hook_FORM_ID_alter().
 */
function bbb_case_study_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view_ids = [
    'case_study_listing',
    'article',
    'news',
    'partners',
    'research_and_publications',
  ];

  $display = [
    'article_listing_block',
    'news_list_block',
    'partner_list',
    'success_story_list',
    'rp_list',
  ];
  $view = $form_state->get('view');
  if ($form_id == 'views_exposed_form' && in_array($view->id(), $view_ids)) {
    if (in_array($view->current_display, $display)) {
      // Hide sort filters from exposed form.
      $form['sort_by']['#title'] = '';
      $form['sort_by']['#attributes']['class'] = ["visually-hidden"];
      // For better exposed sort field.
      $form['sort_bef_combine']['#title'] = '';
      $form['sort_bef_combine']['#attributes']['class'] = ["visually-hidden"];
      // Add wrappers for filtered terms and input actions.
      $filtered_tags_twig = [
        '#theme' => 'filtered_tags_container',
      ];
      $html = \Drupal::service('renderer')->renderPlain($filtered_tags_twig);
      $form['actions']['#prefix'] = '<div class="coh-container filtered-tags-wrapper">' . $html;
      $form['actions']['#suffix'] = '</div>';
      // Set default filter from Url.
      if ($view->id() != 'news') {
        _bbb_case_study_set_default_filter($form_state);
      }
    }
  }
}

/**
 * Implements hook_tokens_alter().
 */
function bbb_case_study_tokens_alter(array &$replacements, array $context) {
  // Replace markup for field tokens.
  _bbb_case_study_alter_term_markup($replacements, $context);
}

/**
 * Helper to update markup for term field tokens.
 */
function _bbb_case_study_alter_term_markup(array &$replacements, array $context) {
  if ($context['type'] == 'entity' && !empty($replacements)) {
    if (isset($context['data'])) {
      // List of fields for token alter.
      $filter_fields = [
        'field_finance_type',
        'field_programme',
        'field_region',
        'field_sector',
        'field_topic',
        'field_partner',
        'field_partner_sector',
      ];
      // Get token name.
      $name = key($context['tokens']);
      if (in_array($name, $filter_fields)) {
        // Entity from the context.
        $entity = $context['data']['entity'];
        $type = $entity->bundle();
        $uri = '/';
        $site_settings = \Drupal::service('site_settings.loader');
        $url_aliases = $site_settings->loadByFieldset('listing_page_urls');
        if ($type == 'finance_type') {
          $replacements[$context['tokens'][$name]] =
          _bbb_case_study_generate_token_markup($entity, $name, '');
        }
        else {
          if (isset($url_aliases[$type])) {
            $uri = $url_aliases[$type];
          }
          // Generate the token markup.
          $render = _bbb_case_study_generate_token_markup($entity, $name, $uri);
          // Replace token value.
          if (is_array($render)) {
            $replacements[$context['tokens'][$name]] = \Drupal::service('renderer')->render($render);
          }
          else {
            $replacements[$context['tokens'][$name]] = $render;
          }
        }
      }
    }
  }
}

/**
 * Generate render array for token replacement.
 *
 * @return array
 *   Render array.
 */
function _bbb_case_study_generate_token_markup($entity, $name, $uri) {
  $links = [];
  if ($entity->hasField($name)) {
    // Load terms.
    $entities = $entity->{$name}->referencedEntities();
    if (!empty($entities)) {
      if ($entity->bundle() == 'finance_type') {
        // Get vocab name.
        $vid = $entity->{$name}->getFieldDefinition()->getSettings()['handler_settings']['target_bundles'];
        $vid = key($vid);
        $query = \Drupal::entityQuery('taxonomy_term');
        $query->condition('vid', $vid);
        $query->condition('status', 1);
        $count = $query->count()->execute();

        if (count($entities) >= $count) {
          return t("All")->__toString();
        }
      }

      foreach ($entities as $term) {
        $term_name = $term->label();
        $type = $entity->bundle();
        if ($type == 'finance_type') {
          $terms[] = $term_name;
        }
        else {
          $vocab = str_replace('field_', '', $name);
          $str = strtolower($term_name);
          $link = sprintf('/%s?%s=%s', $uri, $vocab, urlencode($str));
          $links[] = [
            'text' => $term_name,
            'link' => $link,
          ];
        }
      }

      if (!empty($links)) {
        return [
          '#theme' => 'related_tags_accessibility',
          '#links' => $links,
          '#multiple' => (count($links) > 1) ? TRUE : FALSE,
          '#attributes' => [
            'class' => 'coh-list-item',
          ],
        ];
      }
      else {
        $result = implode(', ', $terms);
        return $result;
      }
    }
  }
}

/**
 * Helper to set default filter from Url.
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function _bbb_case_study_set_default_filter(FormStateInterface &$form_state) {
  // Execute only on page load.
  if (\Drupal::routeMatch()->getRouteName() != 'views.ajax') {
    // Get parameters from URL.
    $params = \Drupal::request()->query->all();
    if (!empty($params)) {
      $key = key($params);

      if (!is_array($params[$key])) {
        $properties['name'] = urldecode($params[$key]);
        // Load term.
        $term = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->loadByProperties($properties);
        if (!empty($term)) {
          $term = reset($term);
          $tid = $term->id();
          // Get vocabulary id.
          $vid = $term->get('vid')->target_id;
          if ($vid == 'business_topic') {
            $vid = 'topic';
          }
          $vid = 'field_' . $vid;
          $input[$vid] = [$tid => $tid];
          // Set default filter from url argument.
          $form_state->setUserInput($input);
        }
      }
    }
  }
}

/**
 * Implements hook_block_build_alter().
 */
function bbb_case_study_block_build_alter(array &$build, BlockPluginInterface $block) {
  $label = $block->label();
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    // Add the 'node' cache tags for hero_image,hero_branded & breadcrumb block.
    $labels = [
      'Hero Image',
      'Hero Branded',
      'Breadcrumb',
      'Hero Team Member',
    ];
    if (in_array($label, $labels)) {
      $build = [
        '#cache' => [
          'tags' => $node->getCacheTags(),
        ],
      ];
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function bbb_case_study_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'case_study_listing' && $view->current_display == 'related_case_studies') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface && $node->getType() == 'case_study') {
      $fields = [
        'field_business_structure',
        'field_topic',
        'field_finance_type',
        'field_programme',
        'field_region',
        'field_sector',
      ];
      $terms = _bbb_article_get_field_term_ids($node, $fields);
    }

    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as $key => &$condition) {
        if ($condition['field'] == 'taxonomy_index.tid') {
          if (empty($terms)) {
            // Remove condition if no terms found in content.
            unset($condition_group['conditions'][$key]);
          }
          else {
            $condition['operator'] = 'IN';
            $condition['value'] = $terms;
          }
        }
      }
    }
  }
}
